import React, { useEffect, useRef, useState } from 'react';
import { Chart, registerables } from 'chart.js';
import 'bootstrap/dist/css/bootstrap.min.css';

Chart.register(...registerables); // Register Chart.js components

function Dashboared({ filteredData }) {
  const chartRef = useRef(null);
  const [students, setStudents] = useState([]); // State to hold student data
  const [searchParams, setSearchParams] = useState({
    name: '',
    rollNumber: '',
    company: '',
    branch: '',
    year: '',
  });

  // Function to fetch students based on search parameters
  const fetchStudents = async (params) => {
    const query = new URLSearchParams(params).toString();
    const response = await fetch(`http://localhost:8080/students/search?${query}`);
    const data = await response.json();
    setStudents(data);
  };

  // Effect for initializing chart
  useEffect(() => {
    const myChart = new Chart(chartRef.current, {
      type: 'line', // Specify the chart type
      data: {
        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'], // X-axis labels
        datasets: [{
          label: 'Demo Dataset',
          data: [65, 59, 80, 81, 56, 55, 40], // Y-axis data
          borderColor: 'rgba(75, 192, 192, 1)',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          borderWidth: 1,
        }],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
        },
      },
    });

    return () => {
      myChart.destroy();
    };
  }, []);

  // Function to handle search input
  const handleSearch = () => {
    fetchStudents(searchParams);
  };

  // Function to handle input changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setSearchParams({ ...searchParams, [name]: value });
  };

  // Combine students from filteredData and search
  const displayedStudents = filteredData.length > 0 ? filteredData : students;

  return (
    <main className="col-md-9 ms-sm-auto col-lg-10 px-md-4">
      <div className="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 className="h2">Dashboard</h1>
      </div>

      <canvas className="my-4 w-100" ref={chartRef} style={{ display: 'block', boxSizing: 'border-box', height: '514px', width: '1218px' }}></canvas>

      <section>
        <h2>Search Students</h2>
        <div className="mb-3">
          <input type="text" name="name" placeholder="Name" value={searchParams.name} onChange={handleChange} className="form-control" />
          <input type="text" name="rollNumber" placeholder="Roll Number" value={searchParams.rollNumber} onChange={handleChange} className="form-control" />
          <input type="text" name="company" placeholder="Company" value={searchParams.company} onChange={handleChange} className="form-control" />
          <input type="text" name="branch" placeholder="Branch" value={searchParams.branch} onChange={handleChange} className="form-control" />
          <input type="text" name="year" placeholder="Year" value={searchParams.year} onChange={handleChange} className="form-control" />
          <button onClick={handleSearch} className="btn btn-primary mt-2">Search</button>
        </div>
        
        <h2>Student Data</h2>
        <div className="table-responsive small">
          <table className="table table-striped table-sm">
            <thead>
              <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Roll Number</th>
                <th scope="col">Company</th>
                <th scope="col">Branch</th>
                <th scope="col">Course</th>
              </tr>
            </thead>
            <tbody>
              {displayedStudents.length > 0 ? displayedStudents.map((student, index) => (
                <tr key={index}>
                  <td>{index + 1}</td>
                  <td>{student.name}</td>
                  <td>{student.Roll_no}</td>
                  <td>{student.company}</td>
                  <td>{student.branch}</td>
                  <td>{student.course}</td>
                </tr>
              )) : (
                <tr>
                  <td colSpan="6" className="text-center">No data found</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </section>
    </main>
  );
}

export default Dashboared;
